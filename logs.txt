The second week I decided I would setup the C++ updater to launch the dll, test the updater with the launcher, and adjust the readme. 
After spending about five hours I have not found a convenient and adaptable way to launch the forms part of the C# dll. 
I assumed this would not take much time, but I was wrong. I will be adjusting my schedule this coming week and creating a C# application
that can launch my dll, which may give me less time for troubleshooting later.

What I have discovered:

Forms applications load using clr and load differently.
Although I can reference the dll and call the function, an error comes back with SetCompatibleTextRenderingDefault not set.
I have made sure Application::SetCompatibleTextRenderingDefault(false); was on both sides and before the call.
I tried a few other methods as well revolving around loading the dll from assembly, which I could not get to work at all.
I also tried referencing the function through CLR itself, but I could not find enough documentation on this to invoke the function.

The third week I setup the executable to download, unzip, and launch the dll in C#. I also looked into some readme examples and
setup the readme.

What I learned this week:
How to load a WFA in C#
How to download files in C#
How to unzip files in C#
How to make a proper readme, although mine will need to be updated as the project progresses
How to merge another solution into a  git repo

The fourth week I designed the gui and added some functionality to it. I spent some time looking at different applications and patchers
to get an idea of what to do with mine. Since most use a custom GUI without the standard windows control bar, I decided to take the same
approach. First I added an event to start the program using the Start button to get familiar with how events work in C#. I also had to
add my own control bar and add an event to allow users to move the window with it. This required importing functions from user32.dll.
Afterwards I went back and added Environment.Exit(0) to the start button event so that the patcher closes after launching the program.

What I learned this week:
How to make a decent looking user friendly GUI in C#
How to create and assign events in C#
How to execute a new program with parameters using C# (System.Diagnostics.Process.Start())
How to move a window using functions from a system dll (ReleaseCapture() and SendMessage()) in combination with the mouse events
How to call the exit function in C#


Future tasks to be adjusted as needed:
The fifth week I will finish the logic for patching and start working on gui functionality.
The final week I will finish working on gui functionality, and I will also test and revise as needed for bugs. 
I will most likely have others test for bugs that I do not find. 
